class Node:
    def __init__(self,data):
        self.data =data
        self.left=None
        self.right=None

def inorder_traversal(root):
    if root is None:
        return
    inorder_traversal(root.left)
    print(root.data,end=" ")
    inorder_traversal(root.right)

def preorder_traversal(root):
    if root:
        print(root.data, end=" ")
        preorder_traversal(root.left)
        preorder_traversal(root.right)

root = Node(5)
root.left = Node(6)
root.right = Node(12)
root.right.right = Node(3)
root.left.left = Node(10)
root.left.right = Node(33)
root.left.left.left=Node(56)
preorder_traversal(root)















class Node:
    def __init__(self,data):
        self.data =data
        self.left=None
        self.right=None

class bst:
    def __init__(self):
        self.root = None

    def insert(self,data):
        self.root = self.rec_insert(self.root,data)

    def rec_insert(self,root,data):

        if root is None:
            return Node(data)
        if root.data >data:
            root.left = self.rec_insert(root.left,data)
        else:
            root.right = self.rec_insert(root.right,data)
        return root

    def inorder(self):
        def rec_inorder(root):
            if root:
                rec_inorder(root.left)
                print(root.data,end=" ")
                rec_inorder(root.right)
        rec_inorder(self.root)


obj = bst()
obj.insert(25)
obj.insert(63)
obj.insert(72)
obj.insert(22)
obj.insert(35)
obj.insert(17)
obj.inorder()











class Node:
    def __init__(self,data):
        self.data =data
        self.left=None
        self.right=None

class bst:
    def __init__(self):
        self.root = None

    def insert(self,data):
        self.root = self.rec_insert(self.root,data)

    def rec_insert(self,root,data):

        if root is None:
            return Node(data)
        if root.data >data:
            root.left = self.rec_insert(root.left,data)
        else:
            root.right = self.rec_insert(root.right,data)
        return root

    def inorder(self):
        def rec_inorder(root):
            if root:
                rec_inorder(root.left)
                print(root.data,end=" ")
                rec_inorder(root.right)
        rec_inorder(self.root)

    def sum(self,root):
        if not root:  return 0
        return root.data + self.sum(root.left) + self.sum(root.right)

    def count(self, root):
        if not root:  return 0
        return 1 + self.count(root.left) + self.count(root.right)

    def height(self, root):
        if not root:  return 0
        return 1 + max(self.height(root.left) , self.height(root.right))



obj = bst()
obj.insert(20)
obj.insert(60)
obj.insert(70)
obj.insert(25)
obj.insert(35)
obj.insert(10)

obj.inorder()
print()
print( obj.sum(obj.root) )
print( obj.count(obj.root) )
print( obj.height(obj.root)-1 )









class Graph:
    def __init__(self,size):
        self.graph = [ [0]*size for i in range(size)]
        self.dict = {"B": 0, "T": 1, "P": 2, "D": 3, "L": 4}
    def insert_list(self,v,e):
        if v not in self.graph:
            self.graph[v] = [e]
        else:
            self.graph[v].append(e)

    def insert_matrix(self,v,e):
        row , col = self.dict[v] ,self.dict[e]
        self.graph[row][col]=1
        self.graph[col][row]=1
obj = Graph(5)
obj.insert_matrix("B","T")
obj.insert_matrix("B","P")
obj.insert_matrix("B","L")
obj.insert_matrix("D","P")
obj.insert_matrix("D","T")
print(obj.graph)
















class Graph:
    def __init__(self,size):
            self.graph = {}
    def insert_list(self,v,e):
        if v not in self.graph:
            self.graph[v] = [e]
        else:
            self.graph[v].append(e)

    def bfs(self,start):
        queue = [start]
        visited = []
        while queue:
            cur = queue.pop(0)
            if cur not in visited:
                visited.append(cur)
                queue.extend(self.graph[cur])
        print(visited)





obj = Graph(5)
obj.insert_list("B","T")
obj.insert_list("T","B")
obj.insert_list("B","P")
obj.insert_list("P","B")
obj.insert_list("B","D")
obj.insert_list("D","B")
obj.insert_list("P","D")
obj.insert_list("D","P")
obj.insert_list("T","D")
obj.insert_list("D","T")
obj.insert_list("D","G")
obj.insert_list("G","D")
obj.insert_list("D","K")
obj.insert_list("K","D")
obj.insert_list("K","L")
obj.insert_list("L","K")
print(obj.graph)
obj.bfs("B")

